import asyncio
import logging
from contextlib import suppress

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound

from tools import server, settings, database
from tools.settings import Configuration, StateMachine


logging.basicConfig(level=logging.INFO)
bot = Bot(token=settings.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(lambda message: message.text.lower().strip() not in ["–Ω–µ—Ç", "–¥–∞", '–≥–æ—Ç–æ–≤'], state=StateMachine.question)
async def process_gender_invalid(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –î–∞/–ù–µ—Ç")


# –ù–∞—á–∞–ª–æ
@dp.message_handler(commands='start')
async def run_bot(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∏–Ω–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—Å–∞—Ç—å - –≥–æ—Ç–æ–≤"""

    server_data = server.get_config_info()  # –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–ì–æ—Ç–æ–≤')
    await StateMachine.question.set()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(f"–í–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {server_data.count - server_data.current_index}")
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - –≥–æ—Ç–æ–≤', reply_markup=markup)


# –í–æ–ø—Ä–æ—Å
@dp.message_handler(state=StateMachine.question)
async def get_question_1(message: types.Message, state: FSMContext):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ó–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ 
    –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥–∞"""

    logging.info('STATE 1 activited')
    server_data = server.get_config_info() 
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç 
    try:
        if message.text.lower().strip() == '–Ω–µ—Ç': # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞–≤—ã–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω
            await StateMachine.rename.set() # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=types.ReplyKeyboardRemove()) # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            return # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å—é —Ä–∞–±–æ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        elif message.text.lower().strip() == '–¥–∞': # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Å –Ω–∞–≤—ã–∫–æ–º –≤—Å—ë –æ–∫–µ–π
            if server_data.current_index == 0: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –º—ã –Ω–µ –±—Ä–∞–ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ –µ—Å—Ç—å -1 (–º–∏–Ω—É—Å –ø–µ—Ä–≤—ã–π)
                server.update_skill(server_data.current_index) # –ï—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–¥ —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –µ–≥–æ
            else:
                server.update_skill(server_data.current_index-1) # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—é—â–∏–π
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        server.update_config(Configuration(server_data.path, server_data.count, server_data.current_index+1, finished=False))
        question = server.get_skill(server_data.current_index) # –ó–∞–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add('–ù–µ—Ç', '–î–∞')
        await StateMachine.question.set()
        await message.answer(   f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ?\n-{question.name.capitalize()}\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å: {server_data.count - server_data.current_index}",
                                reply_markup=markup )
    except IndexError: # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        logging.error('INDEX ERROR')
        if not server_data.finished: # –ï—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª–∏ —Ä–∞–±–æ—Ç—É,  —Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ –∫—ç—à –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            await state.update_data(last_answer=message.text) 
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
            await message.answer('‚ùó–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=markup)
            await StateMachine.last.set()


# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@dp.message_handler(state=StateMachine.rename)
async def rename_func(message: types.Message, state:FSMContext):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    logging.info('RENAME STATE activited')
    try:
        server_data = server.get_config_info()
        server.update_skill(server_data.current_index - 1, new_value=message.text.capitalize())
        server.update_config(Configuration(server_data.path, server_data.count, server_data.current_index + 1, finished=False))
        question = server.get_skill(server_data.current_index)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add('–ù–µ—Ç', '–î–∞')
        await StateMachine.question.set()
        await message.answer(   f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ?\n-{question.name.capitalize()}\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å: {server_data.count - server_data.current_index}",
                                reply_markup=markup )
    except IndexError: #  –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–∞–∫ —É —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–µ
        logging.error('INDEX ERROR')
        if not server_data.finished:
            await state.update_data(last_answer=message.text)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
            await message.answer('‚ùó–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=markup)
            await StateMachine.last.set()


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text.lower().strip() in ["–∑–∞–≤–µ—Ä—à–∏—Ç—å"], state=StateMachine.last)
async def completion(message: types.Message, state: FSMContext):
    logging.info('LAST STATE')
    try:
        data = await state.get_data()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        if data['last_answer'].strip().lower() == '–Ω–µ—Ç': 
            await StateMachine.rename.set()
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=types.ReplyKeyboardRemove())
    except BaseException as err:
        logging.error('Base ERROR')
        pass
    
    msg = await message.answer('‚è±–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n'
                               '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è',
                               reply_markup=types.ReplyKeyboardRemove())
    asyncio.create_task(delete_message(msg, 1))  # –£–¥–∞–ª—è–µ–º –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    result_path = server.show_results()

    if result_path:
        await message.answer('‚úÖ\t–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ë–î —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏\n')
        # await bot.send_document(message.from_user.id, open(result_path,'rb'))
    else:
        await message.answer('üòá–ë–î —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞! ')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


if __name__ == "__main__":
    database.create_table(db_name=settings.SQL_NAME, table_name=settings.SQL_TABLE)
    executor.start_polling(dp, skip_updates=True)
