import asyncio
import logging
from contextlib import suppress

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound

from tools import settings, server
from tools.settings import Configuration, StateMachine

logging.basicConfig(level=logging.INFO)
bot = Bot(settings.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ù–∞—á–∞–ª–æ
@dp.message_handler(commands='start')
async def run_bot(message: types.Message):
    server_data = server.get_config_info()  # –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–ì–æ—Ç–æ–≤')
    await StateMachine.question.set()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(f"–í–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {server_data.count - server_data.current_index}")
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - –≥–æ—Ç–æ–≤', reply_markup=markup)


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ 
@dp.message_handler(lambda message: message.text.lower().strip() in ["–¥–∞", "–Ω–µ—Ç", '–≥–æ—Ç–æ–≤'], state=StateMachine.question)
async def get_question_1(message: types.Message, state: FSMContext):
    server_data = server.get_config_info()
    try:
        if message.text.lower().strip() == '–¥–∞':
            # –ï—Å–ª–∏ –Ω–µ –æ—Ç–Ω–∏–º–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—É, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–≤—ã–∫ –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤–ø–µ—Ä–µ–¥–∏ –Ω—É–∂–Ω–æ–≥–æ
            server.add_to_remove(server_data.current_index - 1)

        # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –¥–≤–∞ –Ω–∞–≤—ã–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∏—Ö –∏–Ω—Ñ—É –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –∞–π–¥–∏
        question = server.get_question(server_data.current_index)
        # –ú–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        server.post_config_info(Configuration(server_data.path, server_data.count, server_data.current_index + 1))

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add('–ù–µ—Ç', '–î–∞')
        await StateMachine.question.set() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await message.answer(f"‚ùî–≠—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ?\n\n1Ô∏è‚É£ \t{question.original.capitalize()}\n"
                             f"2Ô∏è‚É£\t{question.duplicate.capitalize()}\n\n"
                             f"ü§î–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {question.percent}%\n"
                             f"üì∂–û—Å—Ç–∞–ª–æ—Å—å: {server_data.count - server_data.current_index}", reply_markup=markup)

    except IndexError:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(last_answer=message.text)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add('–ó–∞–≤–µ—Ä—à–∏—Ç—å')
        await message.answer('‚ùó–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!', reply_markup=markup)
        await StateMachine.last.set()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text.lower().strip() in ["–∑–∞–≤–µ—Ä—à–∏—Ç—å"], state=StateMachine.last)
async def completion(message: types.Message, state: FSMContext):
    server_data = server.get_config_info()
    try:
        data = await state.get_data()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        if data['last_answer'].strip().lower() == '–¥–∞':
            server.add_to_remove(server_data.current_index - 1)
    except BaseException as err:
        pass

    msg = await message.answer('‚è±–ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –ë–î –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤...\n'
                               '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è',
                               reply_markup=types.ReplyKeyboardRemove())
    asyncio.create_task(delete_message(msg, 1))  # –£–¥–∞–ª—è–µ–º –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É

    duplicates_for_remove = server.clear_database()
    if duplicates_for_remove:
        await message.answer('‚úÖ\t–£—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –ë–î –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤\n'
                             f'üìâ–£–¥–∞–ª–∏–ª–∏ - {duplicates_for_remove} —à—Ç.')
        # await bot.send_document(message.from_user.id,
                                # open(settings.DATABASE_PATH,
                                    #  'rb'))
    else:
        await message.answer('üòá–ë–î —É–∂–µ –æ—á–∏—â–µ–Ω–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—É—Å—Ç')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.message_handler(lambda message: message.text.lower().strip() not in ["–¥–∞", "–Ω–µ—Ç", '–≥–æ—Ç–æ–≤'],
                    state=StateMachine.question)
async def input_invalid(message: types.Message):
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
