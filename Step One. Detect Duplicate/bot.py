import asyncio
import logging
from contextlib import suppress
import os


from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound

from tools.settings import  StateMachine
from tools import settings
from tools import database


bot = Bot(settings.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Ç–æ–º—É, —á—Ç–æ –±–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –±–æ—Ç)
# –ò –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –¥–∞/–Ω–µ—Ç, —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—à–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç —Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
# –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
CURRENT_QUESTION_ID = None 


# –ù–∞—á–∞–ª–æ
@dp.message_handler(commands='start')
async def run_bot(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–ì–æ—Ç–æ–≤')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å—ë –Ω–∞—á–Ω–µ—Ç—Å—è 
    await StateMachine.start_question.set()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - –≥–æ—Ç–æ–≤', reply_markup=markup)


@dp.message_handler(state=StateMachine.start_question)
async def start(message: types.Message):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ë–µ–∑ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞, –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–±–∏–≤–∞–µ—Ç—Å—è –≤–µ—Å—å –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    –ü–æ—ç—Ç–æ–º—É –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CURRENT_QUESTION_ID"""

    global CURRENT_QUESTION_ID
    if message.text.lower() != "–≥–æ—Ç–æ–≤":
        asyncio.create_task(input_invalid(message))
        return

    couple_skills = database.get_couple_skills_from_database()
    log.info("Couple: %s & %s", couple_skills.demand_name, couple_skills.dup_demand_name)
    CURRENT_QUESTION_ID = couple_skills.id # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–µ–º —Å–∞–º—ã–º —É–∫–∞–∑—ã–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–ù–µ—Ç', '–î–∞')
    await message.answer(f"‚ùî–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏?\n\n"
                        f"1Ô∏è‚É£ \t{couple_skills.demand_name.capitalize()}\n"
                        f"2Ô∏è‚É£\t{couple_skills.dup_demand_name.capitalize()}\n\n"
                        f"ü§î–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {couple_skills.similarity}%\n", reply_markup=markup)
    await StateMachine.question.set()


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ 
@dp.message_handler(state=StateMachine.question)
async def show_question(message: types.Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î
    """
    global CURRENT_QUESTION_ID
    if message.text.lower() not in {"–¥–∞", "–Ω–µ—Ç"}:
        asyncio.create_task(input_invalid(message))
        return

    # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î
    if message.text.lower().strip() == '–¥–∞':
        database.confirm_similarity(couple_id=CURRENT_QUESTION_ID)
        log.warning("Id: %d - Accept", CURRENT_QUESTION_ID)
    elif message.text.lower().strip() == '–Ω–µ—Ç':
        log.info("Id: %d - Failed", CURRENT_QUESTION_ID)
        database.confirm_similarity(couple_id=CURRENT_QUESTION_ID, confirm=False)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    couple_skills = database.get_couple_skills_from_database()
    CURRENT_QUESTION_ID = couple_skills.id
    log.info("Couple: %s & %s", couple_skills.demand_name, couple_skills.dup_demand_name)


    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add('–ù–µ—Ç', '–î–∞')
    await StateMachine.question.set() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(f"‚ùî–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏?\n\n"
                            f"1Ô∏è‚É£ \t{couple_skills.demand_name.capitalize()}\n"
                            f"2Ô∏è‚É£\t{couple_skills.dup_demand_name.capitalize()}\n\n"
                            f"ü§î–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {couple_skills.similarity}%\n", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@dp.message_handler(state=StateMachine.question)
async def input_invalid(message: types.Message):
    await StateMachine.question.set()
    return await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")


if __name__ == '__main__':
    log = settings.start_logging()
    executor.start_polling(dp, skip_updates=True)
